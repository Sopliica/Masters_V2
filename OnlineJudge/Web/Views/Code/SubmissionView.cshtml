@using OnlineJudge.Consts;
@using OnlineJudge.Models.Domain
@using OnlineJudge.Miscs
@using OnlineJudge.Models.IO
@using OnlineJudge.Parsing
@model SubmissionViewModel
@{
    ViewData["Title"] = "Submission Details";
}

<div id="content_box">
    <div style="text-align:center">
        <b class="fieldName">Assignment Details</b>
    </div>
    <br>
    <br>
    <b class="fieldName">Title: </b>@Model.Submission.Assignment.Title
    <br>
    <br>
    <b class="fieldName">Description: </b>@Model.Submission.Assignment.Description
    <br>
    <br>
    <b class="fieldName">Time Limit (seconds): </b>@Model.Submission.Assignment.TimeLimitSeconds
    <br>
    <br>
    <b class="fieldName">Memory Limit (MB): </b>@Model.Submission.Assignment.MemoryLimitMB
    <br>
    <br>
    
    <b class="fieldName">Example Input:</b>
    <br>
    <br>
    
    <textarea id="outputListArea" autocomplete="off" readonly="readonly">@Model.Submission.Assignment.TestCases.First().Input</textarea>
    <br>
    <br>

    <b class="fieldName">Example Output:</b>
    <br>
    <br>

    <textarea id="outputListArea" autocomplete="off" readonly="readonly">@Model.Submission.Assignment.TestCases.First().Output</textarea>
    <br>
    <br>
    
    <br>
    <br>


    
    <hr class="fieldName">   
    <div style="text-align:center">
        <b class="fieldName">Submission Result</b>
    </div>   
    <span class="normal-text">Submiter: <b class="fieldName" style="color:#f7e813">@Model.Submission.User.Login</b></span>
    <br>
    @{
        var status = "";
        var color = "";
        var isSuccessful = false;

        if (Model.Submission.Result == null)
        {
            status = "Waiting for Execution";
            color = "#dbab0a";
        }
        else
        {
            if (Model.Submission.Result.ExecutionStatus == ExecutionStatusEnum.Success)
            {
                status = "Successfully compiled and executed";
                color = "#28a745";
                isSuccessful = true;
            }
            else if (Model.Submission.Result.ExecutionStatus == ExecutionStatusEnum.NetworkError)
            {
                status = "Network error when trying to send code to compilation. Will try again in next few minutes.";
                color = "#d73a49";
            }
            else
            {
                status = "Problem with compilation or execution";
                color = "#d73a49";
            }
        }

        var outputComparisonText = "N/A";
        var outputComparisonColor = "";

        if (Model.Submission.Result != null && Model.Submission.Result.ExecutionStatus ==  ExecutionStatusEnum.Success)
        {
            outputComparisonText = Model.IsOutputOK ? "Output of your program is valid!" : "Output of your program is not valid";
            outputComparisonColor = Model.IsOutputOK ? "#28a745" : "#d73a49";
        }
    }
    <span class="normal-text">Compilation Status: <b class="fieldName" style="color:@color">@status</b></span>
    <br>
    <span class="normal-text">Output Validation Status: <b class="fieldName" style="color:@outputComparisonColor">@outputComparisonText</b></span>
    <br>
    <span class="normal-text">Execution Time: <b class="fieldName">@(isSuccessful ? Model.Submission.Result.Time.ToString() : "N/A")</b></span>
    <br>
    <br>
    @{
        var showErrorLog = Model.Submission.Result != null && Model.Submission.Result.ExecutionStatus == ExecutionStatusEnum.Failed;
    }
    @if (@Model?.Submission?.CurrentTestCase?.Input != null && )
    {
        @if (User.IsInRole(Roles.Administrator) || showErrorLog || Model.IsOutputOK)
        {
            var size = 100;
            <div style="text-align:center">
                <b class="fieldName">Input</b>
            </div>
            <textarea id="outputArea" style="height:@(size)px" autocomplete="off" readonly="readonly">@Model.Submission.CurrentTestCase.Input</textarea>

            <div style="text-align:center">
                <b class="fieldName">Output:</b>
            </div>
            <br>
            if (Model.Submission.Result != null && Model.Submission.Result.Output.Length > 50)
            {
                size = 500;
            }
            <textarea id="outputArea" style="height:@(size)px" autocomplete="off" readonly="readonly">@(Model.Submission.Result?.Output ?? "N/A")</textarea>
            <br>
            <br>
            <div style="text-align:center">
                <b class="fieldName">Expected</b>
            </div>
            <textarea id="outputArea" style="height:@(size)px" autocomplete="off" readonly="readonly">@Model.Submission.CurrentTestCase.Output</textarea>

            <br>
            <br>
            <br>
        }
    }
    <div style="text-align:center">
        <b class="fieldName">Submitted Code:</b>
    </div>
    <script>
        function copy()
        {
            navigator.clipboard.writeText(document.getElementById("codeArea").value);
        }
    </script>
    <div>
        <button id="copyButton" type="button" class="btn" onclick="copy()">Copy Code</button>
    </div>
    <textarea id="codeArea" autocomplete="off" readonly="readonly">@Model.Submission.Code</textarea>
    <br>
    <br>
    <b>Used Libraries:</b>
    <br />
    <br />
    <table id="libs" class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Version</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Submission.Libraries != null)
            {
                foreach (var entry in Model.Submission.Libraries)
                {
                    <tr>
                        <td>@entry.LibraryId</td>
                        <td>@entry.LibraryVersion</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<style>
    .normal-text
    {
        color: white;
    }

    #copyButton
    {
        background-color: rgb(0, 123, 255);
        color: white;
        font-weight: bold;
        float: right;
        margin-bottom: 5px;
    }

    #codeArea
    {
        width: 100%;
        height: 500px;
    }

    #outputArea
    {
        width: 100%;
    }
    
    #outputListArea {
        width: 50%;
    }

    .fieldName
    {
        color: rgb(255, 255, 255);
    }

    #content_box
    {
        margin-top: 15px;
        margin-left: auto;
        margin-right: auto;
        padding: 10px;
        color: rgb(126, 231, 135);
    }
</style>

<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
@using OnlineJudge.Models.IO
@model CodeEditorParams
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/codemirror.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/codemirror.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/mode/clike/clike.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/mode/python/python.js"></script>
<div id="CodeEditor">
    <form>
        <script>                   
            let libs = {};
            let usedLibs = [];

            function uuidv4() {
              return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
              );
            }

            function redrawusedLibs()
            {
                clearTab("used_libs");

                for (let i = 0; i < usedLibs.length; i++)
                {
                    var table = document.getElementById("used_libs");
                    var row = table.insertRow(1);

                    var cell1 = row.insertCell(0);
                    var cell2 = row.insertCell(1);
                    var cell3 = row.insertCell(2);
                    cell1.className = "cellAlign";
                    cell2.className = "cellAlign";
                    cell3.className = "cellAlign";

                    let current = usedLibs[i];
                    cell1.innerText = current.name;
                    cell2.innerText = current.version;

                    var action = document.createElement("button");
                    action.type = "button";
                    action.className = "btn btn-danger";
                    action.innerText = "Remove Library";
                    action.onclick = function () {
                        removeLib(current.id, current.version);
                    }

                    cell3.appendChild(action);
                }
            }

            function addLib(id, name, version, versionId)
            {
                if (usedLibs.find(x => x.name == name && x.id == id && x.version == version))
                    return;

                usedLibs.push({id, name, version, versionId});

                console.log("add");
                console.log(usedLibs);

                redrawusedLibs();
            }
            
            function removeLib(id, version) {
                console.log("rem" + version);
                usedLibs = usedLibs.filter(x => x.id != id || x.version != version);
                redrawusedLibs();
            }

            function clearTab(id)
            {
                var table = document.getElementById(id);
                var rowCount = table.rows.length;

                for (var i = 1; i < rowCount; i++) {
                    table.deleteRow(1);
                }
            }

            function addLibRow(id, name, versions) {
                var table = document.getElementById("libs");
                var row = table.insertRow(1);

                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                var cell3 = row.insertCell(2);

                cell1.className = "cellAlign";
                cell2.className = "cellAlign";
                cell3.className = "cellAlign";

                cell1.innerText = name;

                var guid = uuidv4();
                var select = document.createElement("select");
                select.id = guid;

                for (const val of versions)
                {
                    var option = document.createElement("option");
                    option.value = val.versionId;
                    option.text = val.versionName;
                    select.appendChild(option);
                }

                cell2.appendChild(select);

                var action = document.createElement("button");
                action.type = "button";
                action.className = "btn btn-primary";
                action.innerText = "Add Library";
                action.onclick = function()
                {
                    addLib(id, name, document.getElementById(guid).selectedOptions[0].text, document.getElementById(guid).selectedOptions[0].value);
                }
                cell3.appendChild(action);
            }

            function getLibs(lang) {
                fetch("/Code/Libs/" + lang,
                {
                    method: "GET",
                    headers:
                    {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                })
                .then((res) => res.json())
                .then((data) => 
                {
                    document.getElementById("libLangName").innerText = lang;
                    libs = data.sort((a, b) => b.name.localeCompare(a.name));
                    clearTab("libs");
                    for (let i = 0; i < libs.length; i++) {
                        addLibRow(libs[i].id, libs[i].name, libs[i].versions);
                    }
                })
            }

            function changedLang(selectObject) {
              var value = selectObject.value;
              usedLibs = [];
              document.getElementsByName("compiler_dropdown").forEach(x => x.selectedIndex = "0");
              document.getElementsByName("compiler_dropdown").forEach(x => x.style.display = "none");
              document.getElementById("compilers_" + value).style.display = "";
              getLibs(value);
              clearTab("used_libs");
            }
        </script>

        @{
            var data = Model.AvailableLanguages.OrderBy(x => x.LanguageName).GroupBy(x => x.LanguageName).ToList();
        }

        Language: 
        <select id="langs_dropdown" name="lang" onchange="changedLang(this)">
            @foreach (var entry in data)
            {
                <option value="@entry.Key">@entry.Key</option>
            }
        </select>
        Compiler:
        @for (int i = 0; i < data.Count; i++)
        {
            var entry = data[i];
            var style = i == 0 ? "" : "display:none";
            <select id="compilers_@entry.Key" name="compiler_dropdown" style="@style">
                <option selected="selected" value="-">-</option>
                @foreach(var comp in entry)
                {
                    <option value="@comp.CompilerId">@comp.CompilerName</option>
                }
            </select>
        }
        <script>
            window.onload = function()
            {
                document.getElementsByName("compiler_dropdown").forEach(x => x.selectedIndex = "0");
                getLibs(document.getElementById("langs_dropdown").value);
            }
        </script>
        <br />
        <br />
        <textarea name="code" id="code" placeholder="Paste your code here..."></textarea>
        <script>
            var codeMirrorEditor = CodeMirror.fromTextArea(document.getElementById('code'), {
                lineNumbers: true,
                mode: 'text/x-c++src',
                theme: 'default',
            });
        </script>
        <br />
        <br />
        @if (User.Identity.IsAuthenticated)
        {
            <div id="upload_btn">
                <button type="button" class="btn btn-success" onclick="SendCode()">Submit your code</button>
            </div>
        }
        else
        {
            <div id="upload_btn">
                <a class="btn btn-success" href="/Account/SignIn">Sign In</a>
            </div>
        }
        <br />
        <br />
        <b>Used Libraries:</b>
        <br />
        <br />
        <table id="used_libs" class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Version</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
        <br />
        <br />
        <b>Available Libraries for language: </b><b id="libLangName">-</b>
        <br />
        <br />
        <table id="libs" class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Version</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </form>
</div>

<style>
    #code
    {
        width: 100%;
        height: 500px;
    }

    .cellAlign
    {
        vertical-align: middle;
    }

    tr {
    }

    #upload_btn
    {
        display: flex;
        justify-content:flex-end
    }
</style>

@Html.AntiForgeryToken()

<script>
    function SendCode() {
        var lang = document.getElementById("langs_dropdown").value;
        var code = codeMirrorEditor.getValue();
        var comp = document.getElementById("compilers_" + lang).value;

        let data = { Language: lang, Compiler: comp, Code: code, AssignmentId: '@Model.AssignmentId', Libraries: usedLibs };

        fetch("/Code/Submission/", 
        {
            method: "POST",
            headers: 
            { 
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
            },
            body: JSON.stringify(data)
        })
        .then((res) => 
        {
            if (res.ok)
                return res.json();

            return Promise.reject(res);
        })
        .then((response) => {
            window.location.href = "/Code/Submission/" + response.id;
        })
        .catch((res) => 
        {
            res.text().then(function (result) {
                alert("Error: " + result);
            });
        });
    }
    function changedLang(selectObject) {
        var value = selectObject.value;
        usedLibs = [];
        document.getElementsByName("compiler_dropdown").forEach(x => x.selectedIndex = "0");
        document.getElementsByName("compiler_dropdown").forEach(x => x.style.display = "none");
        document.getElementById("compilers_" + value).style.display = "";
        getLibs(value);
        clearTab("used_libs");

        var mode;
        switch (value.toLowerCase()) {
            case 'c':
                mode = 'text/x-csrc';
                break;
            case 'c++':
                mode = 'text/x-c++src';
                break;
            case 'java':
                mode = 'text/x-java';
                break;
            case 'python':
                mode = 'text/x-python';
                break;
            default:
                mode = 'text/plain';
                break;
        }
        console.log("curr mode: " + mode);
        codeMirrorEditor.setOption('mode', mode);
    }
</script>